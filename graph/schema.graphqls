input AuthUserCreate {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input AuthUserLogin {
  email: String!
  password: String!
}

type AuthUser {
  id: Int!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: String!
  updatedAt: String!
}

type AuthUserResponse {
  authUser: AuthUser!
  token: String!
}

type LoginResponse {
  token: String!
}

type UserEmail {
  email: String!
}
type Time {
  unixTime: Int!
  timeStamp: String!
}

input MessageInput {
  sender_id: ID!
  receiver_id: Int!
  content: String!
}
type MessageResponse {
  id: Int!
  sender_id: Int!
  receiver_id: Int!
  content: String!
  createdAt: String!
}
type FullMessageResponse {
  id: Int!
  sender_id: Int!
  receiver_id: Int!
  content: String!
  createdAt: String!
  sender: AuthUser
  receiver: AuthUser
}

type MessageSub {
  receiver: Int!
}

input Filters {
  skip: Int!
  limit: Int!
}

type Query {
  getCurrentUser(token: String!): AuthUser
  listUsers(filters: Filters): [AuthUser]
  listFriendRequests(filters: Filters): [AuthUser]
  listFriends(filters: Filters): [AuthUser]
  retrieveMessages(sender_id: Int!, receiver_id: Int!): [MessageResponse]
  getRecentChats(sender_id: Int): [FullMessageResponse]
}

type Mutation {
  createAuthUser(input: AuthUserCreate!): AuthUserResponse!
  loginAuthUser(input: AuthUserLogin!): LoginResponse!
  sendMessage(input: MessageInput!): MessageResponse!
  sendFriendRequest(receiver_id: Int!): AuthUser
  acceptFriendRequest(sender_id: Int!): AuthUser
}

type Subscription {
  newMessage(receiver_id: Int!): FullMessageResponse
}
