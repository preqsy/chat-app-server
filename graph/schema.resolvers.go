package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"chat_app_server/graph/model"
	models "chat_app_server/model"
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"time"
)

// CreateAuthUser is the resolver for the createAuthUser field.
func (r *mutationResolver) CreateAuthUser(ctx context.Context, input model.AuthUserCreate) (*model.AuthUserResponse, error) {
	newUser := models.AuthUser{
		Email:     input.Email,
		Password:  input.Password,
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Username:  input.Username,
	}
	savedUser, err := r.service.SaveUser(ctx, &newUser)
	if err != nil {
		return nil, err
	}
	return &model.AuthUserResponse{
		AuthUser: &model.AuthUser{
			ID:        int32(savedUser.AuthUser.ID),
			Email:     savedUser.AuthUser.Email,
			FirstName: savedUser.AuthUser.FirstName,
			LastName:  savedUser.AuthUser.LastName,
			CreatedAt: savedUser.AuthUser.CreatedAt.Format(time.RFC3339),
		},
		Token: savedUser.Token,
	}, nil
}

// LoginAuthUser is the resolver for the loginAuthUser field.
func (r *mutationResolver) LoginAuthUser(ctx context.Context, input model.AuthUserLogin) (*model.LoginResponse, error) {
	user := models.AuthUserLogin{
		Email:    input.Email,
		Password: input.Password,
	}
	token, err := r.service.LoginUser(ctx, &user)
	if err != nil {
		return nil, err
	}
	return &model.LoginResponse{Token: token}, nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, input model.MessageInput) (*model.MessageResponse, error) {
	user, err := r.jwt_utils.GetCurrentAuthUser(ctx)
	if err != nil {
		return nil, err
	}
	newMessage := models.Message{
		SenderID:   user.ID,
		ReceiverID: uint(input.ReceiverID),
		Content:    input.Content,
	}
	fmt.Println("This is the first message", newMessage)

	msgJson, err := json.Marshal(newMessage)
	if err != nil {
		return nil, err
	}

	receiverIdString := strconv.Itoa(int(input.ReceiverID))
	channel := "chat:" + receiverIdString
	fmt.Println("This is the channel", channel)
	err = r.redis_service.PublishMessage(channel, string(msgJson))

	if err != nil {
		return nil, err
	}

	message, err := r.service.SaveMessage(ctx, &newMessage)

	if err != nil {
		return nil, err
	}
	messageResponse := &model.MessageResponse{
		Content:    message.Content,
		SenderID:   int32(message.SenderID),
		ReceiverID: int32(message.ReceiverID),
		CreatedAt:  message.CreatedAt.String(),
		ID:         int32(message.ID),
	}
	return messageResponse, nil
}

// SendFriendRequest is the resolver for the sendFriendRequest field.
func (r *mutationResolver) SendFriendRequest(ctx context.Context, receiverID int32) (*model.AuthUser, error) {
	authUser, err := r.jwt_utils.GetCurrentAuthUser(ctx)
	if err != nil {
		return nil, err
	}
	response, err := r.service.SendFriendRequest(ctx, authUser, uint(receiverID))
	if err != nil {
		return nil, fmt.Errorf("error sending friend request: %v", err)
	}
	return &model.AuthUser{Email: response.Email}, nil
}

// AcceptFriendRequest is the resolver for the acceptFriendRequest field.
func (r *mutationResolver) AcceptFriendRequest(ctx context.Context, senderID int32) (*model.AuthUser, error) {
	authUser, err := r.jwt_utils.GetCurrentAuthUser(ctx)
	if err != nil {
		return nil, err
	}
	response, err := r.service.AcceptFriendRequest(ctx, authUser, uint(senderID))
	if err != nil {
		return nil, fmt.Errorf("error accepting friend request: %v", err)
	}
	return &model.AuthUser{Email: response.Email}, nil
}

// GetCurrentUser is the resolver for the getCurrentUser field.
func (r *queryResolver) GetCurrentUser(ctx context.Context, token string) (*model.AuthUser, error) {
	user, err := r.jwt_utils.GetCurrentAuthUser(ctx)
	if err != nil {
		return nil, err
	}
	return &model.AuthUser{
		Username:  user.Username,
		FirstName: user.FirstName,
		LastName:  user.LastName,
		UpdatedAt: user.UpdatedAt.String(),
		Email:     user.Email,
		CreatedAt: user.CreatedAt.String(),
		ID:        int32(user.ID),
	}, nil
}

// ListUsers is the resolver for the listUsers field.
func (r *queryResolver) ListUsers(ctx context.Context, filters *model.Filters) ([]*model.AuthUser, error) {
	authUser, err := r.jwt_utils.GetCurrentAuthUser(ctx)
	if err != nil {
		return nil, err
	}
	if filters == nil {
		filters = &model.Filters{
			Skip:  0,
			Limit: 20,
		}
	}

	users, err := r.service.ListUsers(ctx, filters.Skip, filters.Limit, authUser)
	if err != nil {
		return nil, err
	}
	var response []*model.AuthUser
	for _, user := range users {
		response = append(response, &model.AuthUser{
			Username:  user.Username,
			FirstName: user.FirstName,
			LastName:  user.LastName,
			UpdatedAt: user.UpdatedAt.String(),
			Email:     user.Email,
			CreatedAt: user.CreatedAt.String(),
			ID:        int32(user.ID),
		})
	}
	return response, nil
}

// ListFriendRequests is the resolver for the listFriendRequests field.
func (r *queryResolver) ListFriendRequests(ctx context.Context, filters *model.Filters) ([]*model.AuthUser, error) {
	authUser, _ := r.jwt_utils.GetCurrentAuthUser(ctx)

	if filters == nil {
		filters = &model.Filters{
			Skip:  0,
			Limit: 20,
		}
	}
	result, err := r.service.ListFriendRequests(ctx, filters.Skip, filters.Limit, authUser)
	if err != nil {
		r.logger.Errorln("error listing friends", err)
		return nil, err
	}
	var users []*model.AuthUser

	for _, user := range result {
		users = append(users, &model.AuthUser{
			Email:     user.Email,
			LastName:  user.LastName,
			FirstName: user.FirstName,
			Username:  user.Username,
			ID:        int32(user.ID),
		})
	}
	return users, nil
}

// ListFriends is the resolver for the listFriends field.
func (r *queryResolver) ListFriends(ctx context.Context, filters *model.Filters) ([]*model.AuthUser, error) {
	authUser, _ := r.jwt_utils.GetCurrentAuthUser(ctx)

	if filters == nil {
		filters = &model.Filters{
			Skip:  0,
			Limit: 20,
		}
	}
	result, err := r.service.ListFriends(ctx, filters.Skip, filters.Limit, authUser)
	if err != nil {
		r.logger.Errorln("error listing friends", err)
		return nil, err
	}
	var users []*model.AuthUser

	for _, user := range result {
		users = append(users, &model.AuthUser{
			Email:     user.Email,
			LastName:  user.LastName,
			FirstName: user.FirstName,
			Username:  user.Username,
			ID:        int32(user.ID),
		})
	}
	return users, nil
}

// NewMessage is the resolver for the newMessage field.
func (r *subscriptionResolver) NewMessage(ctx context.Context, receiverID int32) (<-chan *model.MessageResponse, error) {
	msgChan := make(chan *model.MessageResponse, 1)
	channel := "chat:" + strconv.Itoa(int(receiverID))
	r.logger.Info("Subscribing to channel: ", channel)
	pubSub := r.redis_service.SubscribeToChannel(channel)
	go func() {
		defer pubSub.Close()
		for msg := range pubSub.Channel() {

			var message model.MessageResponse
			err := json.Unmarshal([]byte(msg.Payload), &message)
			fmt.Println("Subscription Message", message)
			if err == nil {
				msgChan <- &message
			}
		}
	}()
	go func() {
		<-ctx.Done()
		r.logger.Info("Context done, closing channel: ", channel)
		pubSub.Close()

		close(msgChan)
	}()
	return msgChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) ListFriendRequest(ctx context.Context, filters *model.Filters) ([]*model.AuthUser, error) {
	authUser, _ := r.jwt_utils.GetCurrentAuthUser(ctx)

	if filters == nil {
		filters = &model.Filters{
			Skip:  0,
			Limit: 20,
		}
	}
	result, err := r.service.ListFriendRequests(ctx, filters.Skip, filters.Limit, authUser)
	if err != nil {
		r.logger.Errorln("error listing friends", err)
		return nil, err
	}
	var users []*model.AuthUser

	for _, user := range result {
		users = append(users, &model.AuthUser{
			Email:     user.Email,
			LastName:  user.LastName,
			FirstName: user.FirstName,
			Username:  user.Username,
			ID:        int32(user.ID),
		})
	}
	return users, nil
}
*/
