package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"chat_app_server/graph/model"
	models "chat_app_server/model"
	"context"
	"fmt"
	"time"
)

// CreateAuthUser is the resolver for the createAuthUser field.
func (r *mutationResolver) CreateAuthUser(ctx context.Context, input model.AuthUserCreate) (*model.AuthUserResponse, error) {
	newUser := models.AuthUser{
		Email:     input.Email,
		Password:  input.Password,
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Username:  input.Username,
	}
	savedUser, err := r.service.SaveUser(&newUser)
	if err != nil {
		return nil, err
	}
	return &model.AuthUserResponse{
		AuthUser: &model.AuthUser{
			ID:        int32(savedUser.AuthUser.ID),
			Email:     savedUser.AuthUser.Email,
			FirstName: savedUser.AuthUser.FirstName,
			LastName:  savedUser.AuthUser.LastName,
			CreatedAt: savedUser.AuthUser.CreatedAt.Format(time.RFC3339),
		},
		Token: savedUser.Token,
	}, nil
}

// Placeholder is the resolver for the placeholder field.
func (r *queryResolver) Placeholder(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Placeholder - placeholder"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
